import{M as _,a as f,c as D}from"./current-dataset-navigation-guards-foEDL9Ou.js";import{d as k}from"./index-C-z09IKS.js";import{P as L}from"./bootstrap.esm-B848_XlO.js";import{_ as z,b$ as $,bY as w,a as i,b as t,t as c,d as b,F as m,r as h,bL as p,i as v,o}from"./index-DRoCyVBH.js";const G={name:"DatasetInfo",components:{TableListing:$,JenaTable:w,Menu:_},...f,mixins:[D],data(){return{datasetStats:{},datasetSize:null,isDatasetSizeLoading:null,statsFields:[{key:"endpoint",label:"Endpoint"},{key:"total",label:"Requests",sortable:!0,sortDirection:"asc"},{key:"good",label:"Good",sortable:!0,sortDirection:"asc"},{key:"bad",label:"Bad",sortable:!0,sortDirection:"asc"}],countGraphFields:[{key:"name",label:"graph name",sortable:!0,sortDirection:"asc"},{key:"triples",label:"triples",sortable:!0,sortDirection:"asc"}]}},computed:{statsItems(){if(!this.datasetStats||!this.datasetStats.datasets)return[];const e=this.datasetStats.datasets[`/${this.datasetName}`],s=e.endpoints;if(!e||!s)return[];const d=Object.keys(s).map(a=>({endpoint:a.startsWith("_")?s[a].description:`${s[a].description} (${a})`,operation:s[a].operation,total:s[a].Requests,good:s[a].RequestsGood,bad:s[a].RequestsBad}));return d.sort((a,r)=>a.operation.localeCompare(r.operation)),d},overall(){if(!this.datasetStats||!this.datasetStats.datasets)return[];const e=this.datasetStats.datasets[`/${this.datasetName}`];return{endpoint:"Overall",total:e.Requests,good:e.RequestsGood,bad:e.RequestsBad}},countGraphItems(){return this.datasetSize?Object.keys(this.datasetSize).map(e=>({name:e,triples:this.datasetSize[e]})):[]}},async beforeRouteUpdate(e,s,d){this.datasetSize=null;const a=f.beforeRouteUpdate;await a(e,s,d)},mounted:function(){const e={html:!0,content:this.$refs["count-triples-content"]},s=this.$refs["count-triples-button"];new L(s,e)},methods:{async countTriplesInGraphs(){this.isDatasetSizeLoading=!0;try{this.datasetSize=await this.$fusekiService.getDatasetSize(this.currentDataset["ds.name"],this.services.query["srv.endpoints"][0]),this.$refs["count-triples-button"].disabled=this.isDatasetSizeLoading,this.datasetStats=await this.$fusekiService.getDatasetStats(this.datasetName)}catch(e){k(this,e)}finally{this.isDatasetSizeLoading=null,this.$refs["count-triples-button"].disabled=!1}}}},R={class:"container-fluid"},q={class:"row mt-4"},I={class:"col-12"},x={class:"card"},B={class:"card-header"},C={class:"card-body"},F={class:"row"},M={class:"col-sm-12 col-md-6"},T={key:0,class:"card-text placeholder-glow"},j={class:"col-6 text-right"},E={class:"col-6"},N=["href"],O={class:"row my-4"},U={class:"col-12 text-center"},P={class:"mb-2"},V={hidden:""},A={ref:"count-triples-content"},J={class:"text-center"},W={ref:"count-triples-button",id:"count-triples-button",type:"button",class:"btn btn-primary","data-bs-toggle":"popover","data-bs-placement":"auto","data-bs-trigger":"focus",title:"Confirm"},Y={class:"col-sm-12 col-md-6"};function H(e,s,d,a,r,u){const y=v("Menu"),g=v("table-listing"),S=v("jena-table");return o(),i("div",R,[t("div",q,[t("div",I,[t("h2",null,"/"+c(e.datasetName),1),t("div",x,[t("nav",B,[b(y,{"dataset-name":e.datasetName},null,8,["dataset-name"])]),t("div",C,[t("div",null,[t("div",F,[t("div",M,[s[7]||(s[7]=t("h3",{class:"text-center"}," Available Services ",-1)),e.services==null?(o(),i("p",T,s[2]||(s[2]=[t("span",{class:"placeholder col-12"},null,-1),t("span",{class:"placeholder col-12"},null,-1),t("span",{class:"placeholder col-12"},null,-1)]))):(o(!0),i(m,{key:1},h(e.services,n=>(o(),i("div",{key:n["srv.type"]},[(o(!0),i(m,null,h(n["srv.endpoints"],l=>(o(),i("div",{class:"row",key:l},[t("div",j,c(n["srv.description"]),1),t("div",E,[t("a",{href:`/${e.datasetName}/${l}`}," /"+c(e.datasetName)+"/"+c(l),9,N)])]))),128))]))),128)),t("div",O,[t("div",U,[s[6]||(s[6]=t("h3",null,"Dataset size",-1)),t("div",P,[t("div",V,[t("div",A,[t("div",J,[s[3]||(s[3]=t("div",{class:"alert alert-warning"}," This may be slow and impose a significant load on large datasets. ",-1)),t("button",{onClick:s[0]||(s[0]=n=>{u.countTriplesInGraphs(),e.$refs["count-triples-button"].disabled=e.isDatasetStatsLoading}),id:"count-triples-submit-button",type:"button",class:"btn btn-primary me-2"}," submit "),t("button",{class:"btn btn-secondary",onClick:s[1]||(s[1]=n=>e.$refs["count-triples-button"].disabled=e.isDatasetStatsLoading)}," cancel ")])],512)]),t("button",W," count triples in all graphs ",512)]),b(g,{fields:r.countGraphFields,items:u.countGraphItems,busy:r.isDatasetSizeLoading,filterable:!1,id:"dataset-size-table",class:"mt-3",bordered:"",hover:"",small:""},{"table-busy":p(()=>s[4]||(s[4]=[t("div",{class:"text-center text-danger my-2"},[t("div",{class:"spinner-border align-middle",role:"status"},[t("span",{class:"visually-hidden"},"Loading...")]),t("strong",null,"Loading...")],-1)])),empty:p(()=>s[5]||(s[5]=[t("span",null,"No data",-1)])),_:1},8,["fields","items","busy"])])])]),t("div",Y,[s[9]||(s[9]=t("h3",{class:"text-center"}," Statistics ",-1)),b(S,{fields:r.statsFields,items:u.statsItems,busy:e.isDatasetStatsLoading,id:"statistics-table",bordered:"",hover:"",small:""},{"table-busy":p(()=>s[8]||(s[8]=[t("div",{class:"text-center text-danger my-2"},[t("div",{class:"spinner-border align-middle",role:"status"},[t("span",{class:"visually-hidden"},"Loading...")]),t("strong",null,"Loading...")],-1)])),"custom-foot":p(n=>[t("tr",null,[(o(!0),i(m,null,h(n.fields,l=>(o(),i("th",{key:l.key},c(u.overall[l.key]),1))),128))])]),_:1},8,["fields","items","busy"])])])])])])])])])}const tt=z(G,[["render",H]]);export{tt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
