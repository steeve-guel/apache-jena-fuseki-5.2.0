import{M as he,c as me,a as ve}from"./current-dataset-navigation-guards-foEDL9Ou.js";import{B as ge,k as ye,C as be,D as ke,E as Ee,l as we,m as Ce,F as Se,K as De,R as Oe,S as Ae,p as Pe,T as Te,q as _e,s as xe,u as Ie,x as Ne,y as Re,V as je,z as Ue,A as Me,G as ze,H as Be,I as Fe,J as He,L as Le,M as $e,N as Ve,O as qe,f as Ge,a as T,b as l,P as We,Q as Xe,U as Ke,W as Je,X as Ye,h as Qe,Y as q,d as P,Z as Ze,$ as et,a0 as tt,a1 as rt,a2 as st,a3 as nt,a4 as it,a5 as at,a6 as ot,a7 as lt,a8 as ut,a9 as dt,aa as ft,ab as ct,ac as pt,ad as ht,ae as mt,af as vt,ag as gt,ah as yt,ai as bt,aj as kt,ak as Et,al as wt,am as Ct,an as St,ao as Dt,ap as Ot,aq as At,ar as Pt,as as Tt,at as _t,au as xt,av as It,aw as Nt,ax as Rt,ay as jt,az as Ut,aA as Mt,aB as zt,aC as Bt,aD as Ft,n as Ht,j as H,aE as Lt,aF as L,aG as $t,aH as Vt,aI as qt,aJ as Gt,aK as Wt,aL as Xt,aM as Kt,aN as Jt,aO as Yt,aP as Qt,aQ as Zt,aR as er,aS as tr,aT as rr,o as _,aU as sr,aV as nr,aW as ir,aX as ar,aY as or,aZ as lr,a_ as ur,a$ as dr,b0 as fr,b1 as cr,r as pr,b2 as hr,i as M,b3 as mr,b4 as vr,b5 as gr,b6 as yr,b7 as br,b8 as kr,b9 as Er,ba as wr,bb as Cr,bc as Sr,bd as Dr,be as Or,bf as Ar,t as D,bg as Pr,bh as Tr,bi as _r,bj as xr,bk as Ir,bl as Nr,bm as Rr,bn as jr,bo as Ur,bp as Mr,bq as zr,br as Br,bs as Fr,bt as Hr,bu as Lr,bv as $r,bw as Vr,bx as qr,by as Gr,bz as Wr,bA as Xr,bB as Kr,bC as Jr,e as Yr,v as Z,bD as ee,bE as Qr,bF as Zr,bG as es,bH as ts,bI as rs,bJ as ss,bK as ns,bL as N,bM as is,w as G,bN as as,bO as os,bP as z,bQ as ls,bR as us,c as ds,g as fs,_ as cs,bS as ps,bT as hs,bU as ms,bV as vs,bW as gs,bX as ys,bY as bs}from"./index-DRoCyVBH.js";import{d as Q}from"./index-C-z09IKS.js";/**
* vue v3.5.11
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ks=()=>{},Es=Object.freeze(Object.defineProperty({__proto__:null,BaseTransition:ge,BaseTransitionPropsValidators:ye,Comment:be,DeprecationTypes:ke,EffectScope:Ee,ErrorCodes:we,ErrorTypeStrings:Ce,Fragment:Se,KeepAlive:De,ReactiveEffect:Oe,Static:Ae,Suspense:Pe,Teleport:Te,Text:_e,TrackOpTypes:xe,Transition:Ie,TransitionGroup:Ne,TriggerOpTypes:Re,VueElement:je,assertNumber:Ue,callWithAsyncErrorHandling:Me,callWithErrorHandling:ze,camelize:Be,capitalize:Fe,cloneVNode:He,compatUtils:Le,compile:ks,computed:$e,createApp:Ve,createBlock:qe,createCommentVNode:Ge,createElementBlock:T,createElementVNode:l,createHydrationRenderer:We,createPropsRestProxy:Xe,createRenderer:Ke,createSSRApp:Je,createSlots:Ye,createStaticVNode:Qe,createTextVNode:q,createVNode:P,customRef:Ze,defineAsyncComponent:et,defineComponent:tt,defineCustomElement:rt,defineEmits:st,defineExpose:nt,defineModel:it,defineOptions:at,defineProps:ot,defineSSRCustomElement:lt,defineSlots:ut,devtools:dt,effect:ft,effectScope:ct,getCurrentInstance:pt,getCurrentScope:ht,getCurrentWatcher:mt,getTransitionRawChildren:vt,guardReactiveProps:gt,h:yt,handleError:bt,hasInjectionContext:kt,hydrate:Et,hydrateOnIdle:wt,hydrateOnInteraction:Ct,hydrateOnMediaQuery:St,hydrateOnVisible:Dt,initCustomFormatter:Ot,initDirectivesForSSR:At,inject:Pt,isMemoSame:Tt,isProxy:_t,isReactive:xt,isReadonly:It,isRef:Nt,isRuntimeOnly:Rt,isShallow:jt,isVNode:Ut,markRaw:Mt,mergeDefaults:zt,mergeModels:Bt,mergeProps:Ft,nextTick:Ht,normalizeClass:H,normalizeProps:Lt,normalizeStyle:L,onActivated:$t,onBeforeMount:Vt,onBeforeUnmount:qt,onBeforeUpdate:Gt,onDeactivated:Wt,onErrorCaptured:Xt,onMounted:Kt,onRenderTracked:Jt,onRenderTriggered:Yt,onScopeDispose:Qt,onServerPrefetch:Zt,onUnmounted:er,onUpdated:tr,onWatcherCleanup:rr,openBlock:_,popScopeId:sr,provide:nr,proxyRefs:ir,pushScopeId:ar,queuePostFlushCb:or,reactive:lr,readonly:ur,ref:dr,registerRuntimeCompiler:fr,render:cr,renderList:pr,renderSlot:hr,resolveComponent:M,resolveDirective:mr,resolveDynamicComponent:vr,resolveFilter:gr,resolveTransitionHooks:yr,setBlockTracking:br,setDevtoolsHook:kr,setTransitionHooks:Er,shallowReactive:wr,shallowReadonly:Cr,shallowRef:Sr,ssrContextKey:Dr,ssrUtils:Or,stop:Ar,toDisplayString:D,toHandlerKey:Pr,toHandlers:Tr,toRaw:_r,toRef:xr,toRefs:Ir,toValue:Nr,transformVNodeArgs:Rr,triggerRef:jr,unref:Ur,useAttrs:Mr,useCssModule:zr,useCssVars:Br,useHost:Fr,useId:Hr,useModel:Lr,useSSRContext:$r,useShadowRoot:Vr,useSlots:qr,useTemplateRef:Gr,useTransitionState:Wr,vModelCheckbox:Xr,vModelDynamic:Kr,vModelRadio:Jr,vModelSelect:Yr,vModelText:Z,vShow:ee,version:Qr,warn:Zr,watch:es,watchEffect:ts,watchPostEffect:rs,watchSyncEffect:ss,withAsyncContext:ns,withCtx:N,withDefaults:is,withDirectives:G,withKeys:as,withMemo:os,withModifiers:z,withScopeId:ls},Symbol.toStringTag,{value:"Module"}));var te={exports:{}};const ws=us(Es);/*!
 Name: vue-upload-component 
Component URI: https://github.com/lian-yue/vue-upload-component#readme 
Version: 3.1.16 
Author: LianYue 
License: Apache-2.0 
Description: Vue.js file upload component, Multi-file upload, Upload directory, Drag upload, Drag the directory, Upload multiple files at the same time, html4 (IE 9), `PUT` method, Customize the filter 
 */(function(u,o){(function(k,I){u.exports=I(ws)})(ds,function(k){function I(s){return x(s)||$(s)||g(s)||y()}function y(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function g(s,e){if(s){if(typeof s=="string")return R(s,e);var t=Object.prototype.toString.call(s).slice(8,-1);if(t==="Object"&&s.constructor&&(t=s.constructor.name),t==="Map"||t==="Set")return Array.from(s);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return R(s,e)}}function $(s){if(typeof Symbol<"u"&&s[Symbol.iterator]!=null||s["@@iterator"]!=null)return Array.from(s)}function x(s){if(Array.isArray(s))return R(s)}function R(s,e){(e==null||e>s.length)&&(e=s.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=s[t];return r}function B(s,e){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(s);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable})),t.push.apply(t,r)}return t}function h(s){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?B(Object(t),!0).forEach(function(r){V(s,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach(function(r){Object.defineProperty(s,r,Object.getOwnPropertyDescriptor(t,r))})}return s}function V(s,e,t){return e in s?Object.defineProperty(s,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):s[e]=t,s}function j(s){"@babel/helpers - typeof";return j=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j(s)}function W(s,e){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(s);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable})),t.push.apply(t,r)}return t}function F(s){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?W(Object(t),!0).forEach(function(r){ie(s,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):W(Object(t)).forEach(function(r){Object.defineProperty(s,r,Object.getOwnPropertyDescriptor(t,r))})}return s}function re(s,e){if(!(s instanceof e))throw new TypeError("Cannot call a class as a function")}function se(s,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(s,r.key,r)}}function ne(s,e,t){return e&&se(s.prototype,e),Object.defineProperty(s,"prototype",{writable:!1}),s}function ie(s,e,t){return e in s?Object.defineProperty(s,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):s[e]=t,s}var X=function(e){var t=new XMLHttpRequest;return t.open(e.method||"GET",e.url),t.responseType="json",e.headers&&Object.keys(e.headers).forEach(function(r){t.setRequestHeader(r,e.headers[r])}),t},ae=function(e,t){return new Promise(function(r,n){e.onload=function(){if(e.status>=200&&e.status<300){var i;try{i=JSON.parse(e.response)}catch{i=e.response}r(i)}else n(e.response)},e.onerror=function(){return n(e.response)},e.send(JSON.stringify(t))})},oe=function(e,t){var r=new FormData;for(var n in t)r.append(n,t[n]);return new Promise(function(i,a){e.onload=function(){if(e.status>=200&&e.status<300){var d;try{d=JSON.parse(e.response)}catch{d=e.response}i(d)}else a(e.response)},e.onerror=function(){return a(e.response)},e.send(r)})};function K(s){var e=X(s);return ae(e,s.body)}var le=function(){function s(e,t){re(this,s),this.file=e,this.options=t,this.chunks=[],this.sessionId=null,this.chunkSize=null,this.speedInterval=null}return ne(s,[{key:"maxRetries",get:function(){return parseInt(this.options.maxRetries,10)}},{key:"maxActiveChunks",get:function(){return parseInt(this.options.maxActive,10)}},{key:"fileType",get:function(){return this.file.type}},{key:"fileSize",get:function(){return this.file.size}},{key:"fileName",get:function(){return this.file.name}},{key:"action",get:function(){return this.options.action||null}},{key:"startBody",get:function(){return this.options.startBody||{}}},{key:"uploadBody",get:function(){return this.options.uploadBody||{}}},{key:"finishBody",get:function(){return this.options.finishBody||{}}},{key:"headers",get:function(){return this.options.headers||{}}},{key:"readyToUpload",get:function(){return!!this.chunks}},{key:"progress",get:function(){var t=this,r=this.chunksUploaded.length/this.chunks.length*100,n=this.chunksUploading.reduce(function(i,a){return i+(a.progress|0)/t.chunks.length},0);return Math.min(r+n,100)}},{key:"chunksToUpload",get:function(){return this.chunks.filter(function(t){return!t.active&&!t.uploaded})}},{key:"hasChunksToUpload",get:function(){return this.chunksToUpload.length>0}},{key:"chunksUploading",get:function(){return this.chunks.filter(function(t){return!!t.xhr&&!!t.active})}},{key:"chunksUploaded",get:function(){return this.chunks.filter(function(t){return!!t.uploaded})}},{key:"createChunks",value:function(){this.chunks=[];for(var t=0,r=this.chunkSize;t<this.fileSize;)this.chunks.push({blob:this.file.file.slice(t,r),startOffset:t,active:!1,retries:this.maxRetries}),t=r,r=t+this.chunkSize}},{key:"updateFileProgress",value:function(){this.file.progress=this.progress}},{key:"pause",value:function(){this.file.active=!1,this.stopChunks()}},{key:"stopChunks",value:function(){this.chunksUploading.forEach(function(t){t.xhr.abort(),t.active=!1}),this.stopSpeedCalc()}},{key:"resume",value:function(){this.file.active=!0,this.startChunking()}},{key:"upload",value:function(){var t=this;return this.promise=new Promise(function(r,n){t.resolve=r,t.reject=n}),this.start(),this.promise}},{key:"start",value:function(){var t=this;K({method:"POST",headers:F(F({},this.headers),{},{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.startBody,{phase:"start",mime_type:this.fileType,size:this.fileSize,name:this.fileName})}).then(function(r){if(r.status!=="success")return t.file.response=r,t.reject("server");t.sessionId=r.data.session_id,t.chunkSize=r.data.end_offset,t.createChunks(),t.startChunking()}).catch(function(r){t.file.response=r,t.reject("server")})}},{key:"startChunking",value:function(){for(var t=0;t<this.maxActiveChunks;t++)this.uploadNextChunk();this.startSpeedCalc()}},{key:"uploadNextChunk",value:function(){if(this.file.active){if(this.hasChunksToUpload)return this.uploadChunk(this.chunksToUpload[0]);if(this.chunksUploading.length===0)return this.finish()}}},{key:"uploadChunk",value:function(t){var r=this;t.progress=0,t.active=!0,this.updateFileProgress(),t.xhr=X({method:"POST",headers:this.headers,url:this.action}),t.xhr.upload.addEventListener("progress",function(n){n.lengthComputable&&(t.progress=Math.round(n.loaded/n.total*100))},!1),oe(t.xhr,Object.assign(this.uploadBody,{phase:"upload",session_id:this.sessionId,start_offset:t.startOffset,chunk:t.blob})).then(function(n){if(t.active=!1,n.status==="success")t.uploaded=!0;else if(t.retries--<=0)return r.stopChunks(),r.reject("upload");r.uploadNextChunk()}).catch(function(){if(t.active=!1,t.retries--<=0)return r.stopChunks(),r.reject("upload");r.uploadNextChunk()})}},{key:"finish",value:function(){var t=this;this.updateFileProgress(),this.stopSpeedCalc(),K({method:"POST",headers:F(F({},this.headers),{},{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.finishBody,{phase:"finish",session_id:this.sessionId})}).then(function(r){if(t.file.response=r,r.status!=="success")return t.reject("server");t.resolve(r)}).catch(function(r){t.file.response=r,t.reject("server")})}},{key:"startSpeedCalc",value:function(){var t=this;this.file.speed=0;var r=0;this.speedInterval||(this.speedInterval=window.setInterval(function(){var n=t.progress/100*t.fileSize;t.file.speed=n-r,r=n},1e3))}},{key:"stopSpeedCalc",value:function(){this.speedInterval&&window.clearInterval(this.speedInterval),this.speedInterval=null,this.file.speed=0}}]),s}(),J={headers:{},action:"",minSize:1048576,maxActive:3,maxRetries:5,handler:le},Y=k.defineComponent({compatConfig:{MODE:3},props:{inputId:{type:String},name:{type:String,default:"file"},accept:{type:String},capture:{},disabled:{default:!1},multiple:{type:Boolean,default:!1},maximum:{type:Number},addIndex:{type:[Boolean,Number]},directory:{type:Boolean},createDirectory:{type:Boolean,default:!1},postAction:{type:String},putAction:{type:String},customAction:{type:Function},headers:{type:Object,default:function(){return{}}},data:{type:Object,default:function(){return{}}},timeout:{type:Number,default:0},drop:{type:[Boolean,String,HTMLElement],default:function(){return!1}},dropDirectory:{type:Boolean,default:!0},size:{type:Number,default:0},extensions:{type:[RegExp,String,Array],default:function(){return[]}},modelValue:{type:Array,default:function(){return[]}},thread:{type:Number,default:1},chunkEnabled:{type:Boolean,default:!1},chunk:{type:Object,default:function(){return J}}},emits:["update:modelValue","input-filter","input-file"],data:function(){return{files:this.modelValue,features:{html5:!0,directory:!1,drop:!1},active:!1,dropActive:!1,dropElementActive:!1,uploading:0,destroy:!1,maps:{},dropElement:null,dropTimeout:null,reload:!1}},mounted:function(){var e=this,t=document.createElement("input");if(t.type="file",t.multiple=!0,window.FormData&&t.files?((typeof t.webkitdirectory=="boolean"||typeof t.directory=="boolean")&&(this.features.directory=!0),this.features.html5&&typeof t.ondrop<"u"&&this.isRelatedTargetSupported()&&(this.features.drop=!0)):this.features.html5=!1,this.maps={},this.files)for(var r=0;r<this.files.length;r++){var n=this.files[r];this.maps[n.id]=n}this.$nextTick(function(){e.$parent?(e.$parent.$forceUpdate(),e.$parent.$nextTick(function(){e.watchDrop(e.drop)})):e.watchDrop(e.drop)})},beforeUnmount:function(){this.destroy=!0,this.active=!1,this.watchDrop(!1),this.watchActive(!1)},computed:{uploaded:function(){for(var e,t=0;t<this.files.length;t++)if(e=this.files[t],e.fileObject&&!e.error&&!e.success)return!1;return!0},chunkOptions:function(){return Object.assign(J,this.chunk)},className:function(){return["file-uploads",this.features.html5?"file-uploads-html5":"file-uploads-html4",this.features.directory&&this.directory?"file-uploads-directory":void 0,this.features.drop&&this.drop?"file-uploads-drop":void 0,this.disabled?"file-uploads-disabled":void 0]},forId:function(){return this.inputId||this.name},iMaximum:function(){return this.maximum===void 0?this.multiple?0:1:this.maximum},iExtensions:function(){if(this.extensions){if(this.extensions instanceof RegExp)return this.extensions;if(this.extensions.length){var e=[];return typeof this.extensions=="string"?e=this.extensions.split(","):e=this.extensions,e=e.map(function(t){return t.trim()}).filter(function(t){return t}),new RegExp("\\.("+e.join("|").replace(/\./g,"\\.")+")$","i")}}},iDirectory:function(){if(this.directory&&this.features.directory)return!0}},watch:{active:function(e){this.watchActive(e)},dropActive:function(e){this.watchDropActive(e),this.$parent&&this.$parent.$forceUpdate()},drop:function(e){this.watchDrop(e)},modelValue:function(e){if(this.files!==e){this.files=e;var t=this.maps;this.maps={};for(var r=0;r<this.files.length;r++){var n=this.files[r];this.maps[n.id]=n}for(var i in this.maps){var a=this.maps[i],d=t[i];a!==d&&this.emitFile(a,d)}for(var p in t)this.maps[p]||this.emitFile(void 0,t[p])}}},methods:{newId:function(){return Math.random().toString(36).substr(2)},clear:function(){if(this.files.length){var e=this.files;this.files=[],this.maps={},this.emitInput();for(var t=0;t<e.length;t++)this.emitFile(void 0,e[t])}return!0},get:function(e){return e?j(e)==="object"?this.maps[e.id||""]||!1:this.maps[e]||!1:!1},add:function(e,t){var r;e instanceof Array?r=e:r=[e],t===void 0&&(t=this.addIndex);for(var n=[],i=0;i<r.length;i++){var a=r[i];this.features.html5&&a instanceof Blob&&(a={id:"",file:a,size:a.size,name:a.webkitRelativePath||a.relativePath||a.name||"unknown",type:a.type}),a=a;var d=!1;if(a.fileObject===!1||(a.fileObject||typeof Element<"u"&&a.el instanceof HTMLInputElement||typeof Blob<"u"&&a.file instanceof Blob)&&(d=!0),d&&(a=h(h({fileObject:!0,size:-1,name:"Filename",type:"",active:!1,error:"",success:!1,putAction:this.putAction,postAction:this.postAction,timeout:this.timeout},a),{},{response:{},progress:"0.00",speed:0}),a.data=h(h({},this.data),a.data?a.data:{}),a.headers=h(h({},this.headers),a.headers?a.headers:{})),a.id||(a.id=this.newId()),!this.emitFilter(a,void 0)&&(this.iMaximum>1&&n.length+this.files.length>=this.iMaximum||(n.push(a),this.iMaximum===1)))break}if(n.length){this.iMaximum===1&&this.clear();var p;if(t===!0||t===0)p=n.concat(this.files);else if(t){var m;p=this.files.concat([]),(m=p).splice.apply(m,[t,0].concat(I(n)))}else p=this.files.concat(n);this.files=p;var c=0;t===!0||t===0?c=0:t?t>=0?t+n.length>this.files.length?c=this.files.length-n.length:c=t:(c=this.files.length-n.length+t,c<0&&(c=0)):c=this.files.length-n.length,n=this.files.slice(c,c+n.length);for(var b=0;b<n.length;b++){var f=n[b];this.maps[f.id]=f}this.emitInput();for(var v=0;v<n.length;v++)this.emitFile(n[v],void 0);return e instanceof Array?n:n[0]}},addInputFile:function(e){var t=this,r=[];this.iMaximum;var n=e.webkitEntries||e.entries||void 0;if(n!=null&&n.length)return this.getFileSystemEntry(n).then(function(p){return t.add(p)});if(e.files)for(var i=0;i<e.files.length;i++){var a=e.files[i];r.push({id:"",size:a.size,name:a.webkitRelativePath||a.relativePath||a.name,type:a.type,file:a})}else{var d=e.value.replace(/\\/g,"/").split("/");(!d||!d.length)&&(d=[e.value]),delete e.__vuex__,r.push({id:"",name:d[d.length-1],el:e})}return Promise.resolve(this.add(r))},addDataTransfer:function(e){var t,r=this;if(e!=null&&(t=e.items)!==null&&t!==void 0&&t.length){for(var n=[],i=0;i<e.items.length;i++){var a=e.items[i],d=void 0;a.getAsEntry?d=a.getAsEntry()||a.getAsFile():a.webkitGetAsEntry?d=a.webkitGetAsEntry()||a.getAsFile():d=a.getAsFile(),d&&n.push(d)}return this.getFileSystemEntry(n).then(function(b){return r.add(b)})}var p=this.iMaximum,m=[];if(e.files.length){for(var c=0;c<e.files.length&&(m.push(e.files[c]),!(p>0&&m.length>=p));c++);return Promise.resolve(this.add(m))}return Promise.resolve([])},getFileSystemEntry:function(e){var t=this,r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";return new Promise(function(n){var i=t.iMaximum;if(!e){n([]);return}if(e instanceof Array){var a=[],d=function v(w){var S=e[w];if(!S||i>0&&a.length>=i)return n(a);t.getFileSystemEntry(S,r).then(function(E){a.push.apply(a,I(E)),v(w+1)})};d(0);return}if(e instanceof Blob){n([{id:"",size:e.size,name:r+e.name,type:e.type,file:e}]);return}if(e.isFile){var p=e;p.file(function(v){n([{id:"",size:v.size,name:r+v.name,type:v.type,file:v}])});return}if(e.isDirectory&&t.dropDirectory){var m=e,c=[];t.createDirectory&&c.push({id:"",name:r+m.name,size:0,type:"text/directory",file:new File([],r+m.name,{type:"text/directory"})});var b=m.createReader(),f=function v(){b.readEntries(function(w){var S=function E(C){if(!w[C]&&C===0||i>0&&c.length>=i)return n(c);if(!w[C])return v();t.getFileSystemEntry(w[C],r+m.name+"/").then(function(U){c.push.apply(c,I(U)),E(C+1)})};S(0)})};f();return}n([])})},replace:function(e,t){var r=this.get(e),n=this.get(t);if(!r||!n||r===n)return!1;var i=this.files.concat([]),a=i.indexOf(r),d=i.indexOf(n);return a===-1||d===-1?!1:(i[a]=n,i[d]=r,this.files=i,this.emitInput(),!0)},remove:function(e){var t=this.get(e);if(t){if(this.emitFilter(void 0,t))return!1;var r=this.files.concat([]),n=r.indexOf(t);if(n===-1)return console.error("remove",t),!1;r.splice(n,1),this.files=r,delete this.maps[t.id],this.emitInput(),this.emitFile(void 0,t)}return t},update:function(e,t){var r=this.get(e);if(r){var n=h(h({},r),t);if(r.fileObject&&r.active&&!n.active&&!n.error&&!n.success&&(n.error="abort"),this.emitFilter(n,r))return!1;var i=this.files.concat([]),a=i.indexOf(r);return a===-1?(console.error("update",r),!1):(i.splice(a,1,n),this.files=i,n=this.files[a],delete this.maps[r.id],this.maps[n.id]=n,this.emitInput(),this.emitFile(n,r),n)}return!1},emitFilter:function(e,t){var r=!1;return this.$emit("input-filter",e,t,function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return r=n,r}),r},emitFile:function(e,t){var r,n=this;this.$emit("input-file",e,t),(r=e)!==null&&r!==void 0&&r.fileObject&&e.active&&(!t||!t.active)?(this.uploading++,this.$nextTick(function(){setTimeout(function(){e&&n.upload(e).then(function(){var i;e&&(e=n.get(e)||void 0),(i=e)!==null&&i!==void 0&&i.fileObject&&n.update(e,{active:!1,success:!e.error})}).catch(function(i){e&&n.update(e,{active:!1,success:!1,error:i.code||i.error||i.message||i})})},Math.ceil(Math.random()*50+50))})):(!e||!e.fileObject||!e.active)&&t&&t.fileObject&&t.active&&this.uploading--,this.active&&(!!e!=!!t||e.active!==t.active)&&this.watchActive(!0)},emitInput:function(){this.$emit("update:modelValue",this.files)},upload:function(e){var t=this.get(e);if(!t)return Promise.reject(new Error("not_exists"));if(!t.fileObject)return Promise.reject(new Error("file_object"));if(t.error)return t.error instanceof Error?Promise.reject(t.error):Promise.reject(new Error(t.error));if(t.success)return Promise.resolve(t);if(t.name&&this.iExtensions&&t.type!=="text/directory"&&t.name.search(this.iExtensions)===-1)return Promise.reject(new Error("extension"));if(this.size>0&&t.size!==void 0&&t.size>=0&&t.size>this.size&&t.type!=="text/directory")return Promise.reject(new Error("size"));if(this.customAction)return this.customAction(t,this);if(this.features.html5){if(this.shouldUseChunkUpload(t))return this.uploadChunk(t);if(t.putAction)return this.uploadPut(t);if(t.postAction)return this.uploadHtml5(t)}return t.postAction?this.uploadHtml4(t):Promise.reject(new Error("No action configured"))},shouldUseChunkUpload:function(e){return this.chunkEnabled&&!!this.chunkOptions.handler&&e.size&&e.size>this.chunkOptions.minSize},uploadChunk:function(e){var t=this.chunkOptions.handler;return e.chunk=new t(e,this.chunkOptions),e.chunk.upload().then(function(r){return e})},uploadPut:function(e){var t=[],r;for(var n in e.data)r=e.data[n],r!=null&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));var i=e.putAction||"",a=t.length?(i.indexOf("?")===-1?"?":"&")+t.join("&"):"",d=new XMLHttpRequest;return d.open("PUT",i+a),this.uploadXhr(d,e,e.file)},uploadHtml5:function(e){var t=new window.FormData,r;for(var n in e.data)r=e.data[n],r&&j(r)==="object"&&typeof r.toString!="function"?r instanceof File?t.append(n,r,r.name):t.append(n,JSON.stringify(r)):r!=null&&t.append(n,r);t.append(this.name,e.file,e.name||e.file.name||e.file.filename);var i=new XMLHttpRequest;return i.open("POST",e.postAction||""),this.uploadXhr(i,e,t)},uploadXhr:function(e,t,r){var n=this,i=t,a=0,d=0;e.upload.onprogress=function(m){if(i&&(i=n.get(i),!(!m.lengthComputable||!i||!i.fileObject||!i.active))){var c=Math.round(Date.now()/1e3);c!==a&&(a=c,i=n.update(i,{progress:(m.loaded/m.total*100).toFixed(2),speed:m.loaded-d}),d=m.loaded)}};var p=window.setInterval(function(){if(i&&(i=n.get(i))){var m;if((m=i)!==null&&m!==void 0&&m.fileObject&&!i.success&&!i.error&&i.active)return}p&&(clearInterval(p),p=void 0);try{e.abort(),e.timeout=1}catch{}},100);return new Promise(function(m,c){if(!i){c(new Error("not_exists"));return}var b,f=function(S){if(!b){if(b=!0,p&&(clearInterval(p),p=void 0),!i)return c(new Error("not_exists"));if(i=n.get(i),!i)return c(new Error("not_exists"));if(!i.fileObject)return c(new Error("file_object"));if(i.error)return i.error instanceof Error?c(i.error):c(new Error(i.error));if(!i.active)return c(new Error("abort"));if(i.success)return m(i);var E={};switch(S.type){case"timeout":case"abort":E.error=S.type;break;case"error":e.status?e.status>=500?E.error="server":e.status>=400&&(E.error="denied"):E.error="network";break;default:e.status>=500?E.error="server":e.status>=400?E.error="denied":E.progress="100.00"}if(e.responseText){var C=e.getResponseHeader("Content-Type");C&&C.indexOf("/json")!==-1?E.response=JSON.parse(e.responseText):E.response=e.responseText}return i=n.update(i,E),i?i.error?i.error instanceof Error?c(i.error):c(new Error(i.error)):m(i):c(new Error("abort"))}};e.onload=f,e.onerror=f,e.onabort=f,e.ontimeout=f,i.timeout&&(e.timeout=i.timeout);for(var v in i.headers)e.setRequestHeader(v,i.headers[v]);i=n.update(i,{xhr:e}),i&&e.send(r)})},uploadHtml4:function(e){var t=this,r=e;if(!r)return Promise.reject(new Error("not_exists"));var n=function(f){f.keyCode===27&&f.preventDefault()},i=document.createElement("iframe");i.id="upload-iframe-"+r.id,i.name="upload-iframe-"+r.id,i.src="about:blank",i.setAttribute("style","width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;");var a=document.createElement("form");a.setAttribute("action",r.postAction||""),a.name="upload-form-"+r.id,a.setAttribute("method","POST"),a.setAttribute("target","upload-iframe-"+r.id),a.setAttribute("enctype","multipart/form-data");for(var d in r.data){var p=r.data[d];if(p&&j(p)==="object"&&typeof p.toString!="function"&&(p=JSON.stringify(p)),p!=null){var m=document.createElement("input");m.type="hidden",m.name=d,m.value=p,a.appendChild(m)}}a.appendChild(r.el),document.body.appendChild(i).appendChild(a);var c=function(){var f,v;try{i.contentWindow&&(v=i.contentWindow.document)}catch{}if(!v)try{v=i.contentDocument?i.contentDocument:i.document}catch{v=i.document}return(f=v)!==null&&f!==void 0&&f.body?v.body.innerHTML:null};return new Promise(function(b,f){setTimeout(function(){if(!r){f(new Error("not_exists"));return}if(r=t.update(r,{iframe:i}),!r)return f(new Error("not_exists"));var v=window.setInterval(function(){r&&(r=t.get(r))&&r.fileObject&&!r.success&&!r.error&&r.active||(v&&(clearInterval(v),v=void 0),i.onabort({type:r?"abort":"not_exists"}))},100),w,S=function(C){var U;if(!w){if(w=!0,v&&(clearInterval(v),v=void 0),document.body.removeEventListener("keydown",n),!r)return f(new Error("not_exists"));if(r=t.get(r),!r)return f(new Error("not_exists"));if(!r.fileObject)return f(new Error("file_object"));if(r.error)return r.error instanceof Error?f(r.error):f(new Error(r.error));if(!r.active)return f(new Error("abort"));if(r.success)return b(r);var O=c(),A={};if(typeof C=="string")return f(new Error(C));switch(C.type){case"abort":A.error="abort";break;case"error":r.error?A.error=r.error:O===null?A.error="network":A.error="denied";break;default:r.error?A.error=r.error:O===null?A.error="network":A.progress="100.00"}if(O!==null){if(O&&O.substr(0,1)==="{"&&O.substr(O.length-1,1)==="}")try{O=JSON.parse(O)}catch{}A.response=O}return r=t.update(r,A),r?(U=r)!==null&&U!==void 0&&U.error?r.error instanceof Error?f(r.error):f(new Error(r.error)):b(r):f(new Error("not_exists"))}};i.onload=S,i.onerror=S,i.onabort=S,document.body.addEventListener("keydown",n),a.submit()},50)}).then(function(b){var f;return i==null||(f=i.parentNode)===null||f===void 0||f.removeChild(i),b}).catch(function(b){var f;return i==null||(f=i.parentNode)===null||f===void 0||f.removeChild(i),b})},watchActive:function(e){for(var t,r=0;t=this.files[r];)if(r++,t.fileObject)if(e&&!this.destroy){if(this.uploading>=this.thread||this.uploading&&!this.features.html5)break;!t.active&&!t.error&&!t.success&&this.update(t,{active:!0})}else t.active&&this.update(t,{active:!1});this.uploading===0&&(this.active=!1)},watchDrop:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0;if(this.features.drop&&e!==t){if(this.dropElement)try{document.removeEventListener("dragenter",this.onDocumentDragenter,!1),document.removeEventListener("dragleave",this.onDocumentDragleave,!1),document.removeEventListener("dragover",this.onDocumentDragover,!1),document.removeEventListener("drop",this.onDocumentDrop,!1),this.dropElement.removeEventListener("dragenter",this.onDragenter,!1),this.dropElement.removeEventListener("dragleave",this.onDragleave,!1),this.dropElement.removeEventListener("dragover",this.onDragover,!1),this.dropElement.removeEventListener("drop",this.onDrop,!1)}catch{}var r=null;if(e)if(typeof e=="string")r=document.querySelector(e)||this.$root.$el.querySelector(e);else if(e===!0){var n;if(r=this.$parent.$el,!r||((n=r)===null||n===void 0?void 0:n.nodeType)===8){var i;r=this.$root.$el,(!r||((i=r)===null||i===void 0?void 0:i.nodeType)===8)&&(r=document.body)}}else r=e;this.dropElement=r,this.dropElement&&(document.addEventListener("dragenter",this.onDocumentDragenter,!1),document.addEventListener("dragleave",this.onDocumentDragleave,!1),document.addEventListener("dragover",this.onDocumentDragover,!1),document.addEventListener("drop",this.onDocumentDrop,!1),this.dropElement.addEventListener("dragenter",this.onDragenter,!1),this.dropElement.addEventListener("dragleave",this.onDragleave,!1),this.dropElement.addEventListener("dragover",this.onDragover,!1),this.dropElement.addEventListener("drop",this.onDrop,!1))}},watchDropActive:function(e,t){e!==t&&(!e&&this.dropElementActive&&(this.dropElementActive=!1),this.dropTimeout&&(clearTimeout(this.dropTimeout),this.dropTimeout=null),e&&(this.dropTimeout=setTimeout(this.onDocumentDrop,1e3)))},onDocumentDragenter:function(e){var t,r;if(!this.dropActive&&e.dataTransfer){var n=e.dataTransfer;n!=null&&(t=n.files)!==null&&t!==void 0&&t.length?this.dropActive=!0:n.types?n.types.indexOf&&n.types.indexOf("Files")!==-1?this.dropActive=!0:(r=n.types)!==null&&r!==void 0&&r.contains&&n.types.contains("Files")&&(this.dropActive=!0):this.dropActive=!0,this.dropActive&&this.watchDropActive(!0)}},onDocumentDragleave:function(e){this.dropActive&&(e.target===e.explicitOriginalTarget||!e.fromElement&&(e.clientX<=0||e.clientY<=0||e.clientX>=window.innerWidth||e.clientY>=window.innerHeight))&&(this.dropActive=!1,this.watchDropActive(!1))},onDocumentDragover:function(){this.watchDropActive(!0)},onDocumentDrop:function(){this.dropActive=!1,this.watchDropActive(!1)},onDragenter:function(e){!this.dropActive||this.dropElementActive||(this.dropElementActive=!0)},onDragleave:function(e){var t;if(this.dropElementActive){var r=e.relatedTarget;if(!r)this.dropElementActive=!1;else if((t=this.dropElement)!==null&&t!==void 0&&t.contains)this.dropElement.contains(r)||(this.dropElementActive=!1);else{for(var n=r;n&&n!==this.dropElement;)n=n.parentNode;n!==this.dropElement&&(this.dropElementActive=!1)}}},onDragover:function(e){e.preventDefault()},onDrop:function(e){e.preventDefault(),e.dataTransfer&&this.addDataTransfer(e.dataTransfer)},inputOnChange:async function(e){var t=this;if(!(e.target instanceof HTMLInputElement))return Promise.reject(new Error("not HTMLInputElement"));e.target;var r=function(i){return t.reload=!0,t.$nextTick(function(){t.reload=!1}),i};return this.addInputFile(e.target).then(r).catch(r)},isRelatedTargetSupported:function(){try{var e=new MouseEvent("mouseout",{relatedTarget:document.body});return"relatedTarget"in e}catch{return!1}}}}),ue=["for"],de=["name","id","accept","capture","disabled","webkitdirectory","allowdirs","directory","multiple"];function fe(s,e,t,r,n,i){return k.openBlock(),k.createElementBlock("span",{class:k.normalizeClass(s.className)},[k.renderSlot(s.$slots,"default"),k.createElementVNode("label",{for:s.forId},null,8,ue),s.reload?k.createCommentVNode("",!0):(k.openBlock(),k.createElementBlock("input",{key:0,ref:"input",type:"file",name:s.name,id:s.forId,accept:s.accept,capture:s.capture,disabled:s.disabled,webkitdirectory:s.iDirectory,allowdirs:s.iDirectory,directory:s.iDirectory,multiple:s.multiple&&s.features.html5,onChange:e[0]||(e[0]=function(){return s.inputOnChange&&s.inputOnChange.apply(s,arguments)})},null,40,de))],2)}function ce(s,e){e===void 0&&(e={});var t=e.insertAt;if(!(typeof document>"u")){var r=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css",t==="top"&&r.firstChild?r.insertBefore(n,r.firstChild):r.appendChild(n),n.styleSheet?n.styleSheet.cssText=s:n.appendChild(document.createTextNode(s))}}var pe=`
.file-uploads {
  overflow: hidden;
  position: relative;
  text-align: center;
  display: inline-block;
}
.file-uploads.file-uploads-html4 input,
.file-uploads.file-uploads-html5 label {
  /* background fix ie  click */
  background: #fff;
  opacity: 0;
  font-size: 20em;
  z-index: 1;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
  width: 100%;
  height: 100%;
}
.file-uploads.file-uploads-html5 input,
.file-uploads.file-uploads-html4 label {
  /* background fix ie  click */
  position: absolute;
  background: rgba(255, 255, 255, 0);
  overflow: hidden;
  position: fixed;
  width: 1px;
  height: 1px;
  z-index: -1;
  opacity: 0;
}
`;return ce(pe),Y.render=fe,Y})})(te);var Cs=te.exports;const Ss=fs(Cs);ps.add(hs,ms,vs,gs);const Ds={name:"DatasetUpload",components:{Menu:he,FontAwesomeIcon:ys,FileUpload:Ss,JenaTable:bs},mixins:[me],...ve,data(){return{datasetGraphName:null,datasetFiles:null,graphNameClasses:["form-control"],fileUploadClasses:["btn","btn-success"],upload:{files:[],accept:"",minSize:0,multiple:!0,directory:null,drop:!0,dropDirectory:!0,addIndex:!1,thread:3,name:"file",headers:{},data:{},autoCompress:1024*1024,uploadAuto:!1,isOption:!1},datasetTableFields:Object.freeze([{key:"name",label:"name",sortable:!0,sortDirection:"asc"},{key:"size",label:"size",sortable:!0,sortDirection:"asc"},{key:"speed",label:"speed"},{key:"status",label:"status"},{key:"actions",label:"actions"}])}},computed:{datasetTableItems(){return this.upload.files?this.upload.files.map(u=>Object.assign(u,{status:this.getFileStatus(u)})):[]},postActionUrl(){if(this.services===null||!this.services["gsp-rw"]||this.services["gsp-rw"].length===0)return"";const u=this.datasetGraphName&&this.datasetGraphName!==""?`?graph=${this.datasetGraphName}`:"",o=this.services["gsp-rw"]["srv.endpoints"].find(k=>k!=="")||"";return this.$fusekiService.getFusekiUrl(`/${this.datasetName}/${o}${u}`)},uploadCount(){return!this.upload||!this.upload.files?0:this.upload.files.length},uploadSucceededCount(){return!this.upload||!this.upload.files?0:this.upload.files.filter(u=>!!u.success).length},uploadFailedCount(){return!this.upload||!this.upload.files?0:this.upload.files.filter(u=>!!u.error).length},uploadFailedPercentage(){return this.uploadCount===0?0:this.uploadFailedCount/this.uploadCount*100},uploadSucceededPercentage(){return this.uploadCount===0?0:this.uploadSucceededCount/this.uploadCount*100}},watch:{datasetGraphName(){this.validateGraphName()},upload:{handler(){this.validateFiles()},deep:!0,immediate:!1}},methods:{getFileStatus(u){return u.error?"danger":u.success?"success":u.active?"warning":""},remove(u){this.$refs.upload.remove(u)},readableFileSize:function(u){return u>=1048576?`${(u/1048576).toFixed(2).replace(/\.?0*$/,"")}mb`:u>=1024?`${(u/1024).toFixed(2).replace(/\.?0*$/,"")}kb`:`${u} bytes`},uploadAll(){this.validateForm()&&(this.$refs.upload.active=!0)},validateForm(){return this.validateGraphName()&&this.validateFiles()},validateGraphName(){const u=/^[^\s]+$/,o=this.$refs["dataset-graph-name"].value;return o===""||u.test(o)?(this.graphNameClasses=["form-control is-valid"],!0):(this.graphNameClasses=["form-control is-invalid"],!1)},validateFiles(){return this.upload.files!==null&&this.upload.files.length>0?(this.fileUploadClasses=["btn","btn-success","is-valid"],!0):(this.fileUploadClasses=["btn","btn-success","is-invalid"],!1)},async handleUploadWithErrorHandling(u,o){try{return o.uploadHtml5(u).catch(k=>Q(this,k))}catch(k){Q(this,k)}}}},Os={class:"container-fluid"},As={class:"row mt-4"},Ps={class:"col-12"},Ts={class:"card"},_s={class:"card-header"},xs={key:0,class:"card-body"},Is={key:1,class:"card-body"},Ns={class:"drop-active"},Rs={class:"row"},js={class:"col-sm-12"},Us={ref:"upload-form",novalidate:""},Ms={id:"dataset-graph-name-group",role:"group",class:"form-row form-group"},zs={class:"col input-group has-validation"},Bs={id:"dataset-files",role:"group",class:"form-row form-group"},Fs={class:"col has-validation"},Hs={class:"pt-2 pb-2"},Ls={class:"progress",style:{height:"1.5rem"}},$s=["aria-valuenow","title"],Vs=["aria-valuenow","title"],qs={class:"row"},Gs={class:"col"},Ws={class:"progress"},Xs=["aria-valuenow"],Ks={key:0,class:"small"},Js={key:1,class:"small"},Ys=["onClick"],Qs=["onClick"];function Zs(u,o,k,I,y,g){const $=M("Menu"),x=M("FontAwesomeIcon"),R=M("file-upload"),B=M("jena-table");return _(),T("div",Os,[l("div",As,[l("div",Ps,[l("h2",null,"/"+D(u.datasetName),1),l("div",Ts,[l("nav",_s,[P($,{"dataset-name":u.datasetName},null,8,["dataset-name"])]),u.services!==null&&(!u.services["gsp-rw"]||u.services["gsp-rw"].length===0)?(_(),T("div",xs,o[4]||(o[4]=[l("div",{class:"alert alert-warning"}," No service for adding data available. The Graph Store Protocol service should be configured to allow adding data. ",-1)]))):(_(),T("div",Is,[G(l("div",Ns,o[5]||(o[5]=[l("h3",null,"Drop files to upload",-1)]),512),[[ee,u.$refs.upload&&u.$refs.upload.dropActive]]),l("div",Rs,[l("div",js,[l("h3",null,"Upload files "+D(g.postActionUrl),1),o[13]||(o[13]=l("p",null," Load data into the default graph of the currently selected dataset, or the given named graph. You may upload any RDF format, such as Turtle, RDF/XML or TRiG. ",-1)),l("form",Us,[l("div",Ms,[o[7]||(o[7]=l("label",{for:"dataset-graph-name",class:"col-sm-4 col-md-4 col-lg-2 col-12 col-form-label col-form-label-sm"},"Dataset graph name",-1)),l("div",zs,[G(l("input",{"onUpdate:modelValue":o[0]||(o[0]=h=>y.datasetGraphName=h),class:H(y.graphNameClasses),id:"dataset-graph-name",ref:"dataset-graph-name",type:"text",placeholder:"Leave blank for default graph"},null,2),[[Z,y.datasetGraphName]]),o[6]||(o[6]=l("div",{class:"invalid-feedback"}," Invalid graph name. Please remove any spaces. ",-1))])]),l("div",Bs,[o[12]||(o[12]=l("label",{class:"col-sm-4 col-md-4 col-lg-2 col-12 col-form-label col-form-label-sm"},"Files to upload",-1)),l("div",Fs,[P(R,{ref:"upload",value:y.upload.files,"onUpdate:modelValue":o[1]||(o[1]=h=>y.upload.files=h),"post-action":g.postActionUrl,extensions:y.upload.extensions,accept:y.upload.accept,multiple:y.upload.multiple,directory:y.upload.directory,size:y.upload.size||0,thread:y.upload.thread<1?1:y.upload.thread>5?5:y.upload.thread,headers:y.upload.headers,data:y.upload.data,drop:y.upload.drop,"drop-directory":y.upload.dropDirectory,"add-index":y.upload.addIndex,class:H(y.fileUploadClasses),"custom-action":g.handleUploadWithErrorHandling},{default:N(()=>[P(x,{icon:"plus"}),o[8]||(o[8]=l("span",{class:"ms-2"},"select files",-1))]),_:1},8,["value","post-action","extensions","accept","multiple","directory","size","thread","headers","data","drop","drop-directory","add-index","class","custom-action"]),!u.$refs.upload||!u.$refs.upload.active?(_(),T("button",{key:0,onClick:o[2]||(o[2]=z(h=>g.uploadAll(),["prevent"])),type:"button",class:"btn btn-primary ms-2 d-inline upload-files"},[P(x,{icon:"upload"}),o[9]||(o[9]=l("span",{class:"ms-2"},"upload all",-1))])):(_(),T("button",{key:1,onClick:o[3]||(o[3]=z(h=>u.$refs.upload.active=!1,["prevent"])),type:"button",class:"btn btn-primary ms-2 d-inline"},[P(x,{icon:"times-circle"}),o[10]||(o[10]=l("span",{class:"ms-2"},"stop upload",-1))])),o[11]||(o[11]=l("div",{class:"invalid-feedback"}," Invalid upload files. Please select at least one file to upload. ",-1))])]),l("div",Hs,[l("div",Ls,[l("div",{style:L(`width: ${g.uploadSucceededPercentage}%`),"aria-valuenow":g.uploadSucceededPercentage,title:`${g.uploadSucceededCount}/${g.uploadCount}`,class:"progress-bar",role:"progressbar","aria-valuemin":"0","aria-valuemax":"100"},D(g.uploadSucceededCount)+"/"+D(g.uploadCount),13,$s),l("div",{style:L(`width: ${g.uploadFailedPercentage}%`),"aria-valuenow":g.uploadFailedPercentage,title:`${g.uploadFailedCount}/${g.uploadCount}`,class:"progress-bar bg-danger",role:"progressbar","aria-valuemin":"0","aria-valuemax":"100"},D(g.uploadFailedCount)+"/"+D(g.uploadCount),13,Vs)])])],512)])]),l("div",qs,[l("div",Gs,[P(B,{fields:y.datasetTableFields,items:g.datasetTableItems,"empty-text":"No files selected",bordered:"",fixed:"",hover:""},{"cell(size)":N(h=>[q(D(g.readableFileSize(h.item.size)),1)]),"cell(speed)":N(h=>[q(D(g.readableFileSize(h.item.speed))+"/s ",1)]),"cell(status)":N(h=>[l("div",Ws,[l("div",{class:H(`progress-bar bg-${g.getFileStatus(h.item)}`),style:L(`width: ${h.item.progress}%`),"aria-valuenow":`${h.item.progress}`,"aria-valuemin":"0","aria-valuemax":"100",role:"progressbar"},D(h.item.progress),15,Xs)]),o[14]||(o[14]=l("span",{class:"small"},"Triples uploaded: ",-1)),h.item.response.tripleCount?(_(),T("span",Ks,D(h.item.response.tripleCount),1)):(_(),T("span",Js,"0"))]),"cell(actions)":N(h=>[l("button",{onClick:z(V=>h.item.success||h.item.error==="compressing"?!1:u.$refs.upload.update(h.item,{active:!0}),["prevent"]),type:"button",class:"btn btn-outline-primary me-0 mb-2 d-block upload-file"},[P(x,{icon:"upload"}),o[15]||(o[15]=l("span",{class:"ms-2"},"upload now",-1))],8,Ys),l("button",{onClick:z(V=>g.remove(h.item),["prevent"]),type:"button",class:"btn btn-outline-primary me-0 mb-md-0 d-block d-md-inline-block remove-file"},[P(x,{icon:"minus-circle"}),o[16]||(o[16]=l("span",{class:"ms-2"},"remove",-1))],8,Qs)]),_:1},8,["fields","items"])])])]))])])])])}const nn=cs(Ds,[["render",Zs]]);export{nn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
